const User = require('./services/models/userModel');
const Post = require('./services/models/postModel');
const Reaction = require('./services/models/reactionModel');
const Report = require('./services/models/reportModel');
const bodyParser = require('body-parser');
const express = require("express");
const { generateUsersAndPostsAndReactionsAndReports } = require("./services/db/faker");

const app = express();
app.use(bodyParser.json());

(async () => {
    await generateUsersAndPostsAndReactionsAndReports(1500, 10, 10, 1000); // Mettre 0, 0, 0, 0 pour ne pas générer de données sinon mettre 1500, 10, 10, 1000
})();

// API POUR USER

app.get("/users", async (req, res) => {
    let users = await User.getAll();
    res.send(users);
});

app.get("/user/:id", async (req, res) => {
    let user = await User.getUserById(req.params.id);
    res.send(user);
});

app.post("/postUser", async (req, res) => {
    try {
        let user = await User.createUser(req.body);
        res.send(user);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.put("/user/:id", async (req, res) => {
    try {
        let user = await User.updateUserById(req.params.id, req.body.username, req.body.first_name, req.body.last_name, req.body.email);
        res.send(user);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.delete("/user/:id", async (req, res) => {
    try {
        await User.deleteUserById(req.params.id);
        res.send("User has been deleted successfully");
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// API POUR POST

app.get("/posts", async (req, res) => {
    let posts = await Post.getAll();
    res.send(posts);
});

app.get("/post/:id", async (req, res) => {
    let post = await Post.getPostById(req.params.id);
    res.send(post);
});

app.get("/post/user/:id", async (req, res) => {
    let post = await Post.getPostByUserId(req.params.id);
    res.send(post);
});

app.post("/postPost", async (req, res) => {
    try {
        let post = await Post.createPost(req.body);
        res.send(post);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.put("/post/:id", async (req, res) => {
    try {
        let post = await Post.updatePostById(req.params.id, req.body.content, req.body.user_id);
        res.send(post);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.delete("/post/:id", async (req, res) => {
    try {
        await Post.deletePostById(req.params.id);
        res.send("Post has been deleted successfully");
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// API POUR REACTION

app.get("/reactions", async (req, res) => {
    let reactions = await Reaction.getAll();
    res.send(reactions);
});

app.get("/reaction/user/:id", async (req, res) => {
    let reaction = await Reaction.getReactionByUserId(req.params.id);
    res.send(reaction);
});

app.get("/reaction/post/:id", async (req, res) => {
    let reaction = await Reaction.getReactionByPostId(req.params.id);
    res.send(reaction);
});

app.post("/postReaction", async (req, res) => {
    try {
        let reaction = await Reaction.createReaction(req.body);
        res.send(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.put("/reaction/user/:user_id/post/:post_id", async (req, res) => {
    try {
        let reaction = await Reaction.updateReactionById(req.params.user_id, req.params.post_id, req.body);
        res.sendStatus(200).send(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.delete("/reaction/user/:user_id/post/:post_id", async (req, res) => {
    try {
        await Reaction.deleteReactionById(req.params.user_id, req.params.post_id);
        res.send("Reaction has been deleted successfully");
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// API POUR REPORT

app.get("/reports", async (req, res) => {
    let reports = await Report.getAll();
    res.send(reports);
});

app.get("/report/user/:id", async (req, res) => {
    let report = await Report.getReportByUserId(req.params.id);
    res.send(report);
});

app.get("/report/post/:id", async (req, res) => {
    let report = await Report.getReportByPostId(req.params.id);
    res.send(report);
});

app.post("/postReport", async (req, res) => {
    try {
        let report = await Report.createReport(req.body);
        res.send(report);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.put("/report/user/:user_id/post/:post_id", async (req, res) => {
    try {
        let report = await Report.updateReportById(req.params.user_id, req.params.post_id, req.body);
        res.sendStatus(200).send(report);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

app.delete("/report/user/:user_id/post/:post_id", async (req, res) => {
    try {
        await Report.deleteReportById(req.params.user_id, req.params.post_id);
        res.send("Report has been deleted successfully");
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Lancement du serveur
app.listen(3000, () => {
    console.log("Server running on port http://localhost:3000");
});