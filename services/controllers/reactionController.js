const Reaction = require('../models/reactionModel.js');

exports.fetchReactions = async (req, res) => {
    try {
        const reactions = await Reaction.find(getAll());
        res.status(200).json(reactions);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}

exports.fetchReactionByUserId = async (req, res) => {
    try {
        const reaction = await Reaction.find(getReactionByUserId(req.params.id));
        res.status(200).json(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}

exports.fetchReactionByPostId = async (req, res) => {
    try {
        const reaction = await Reaction.find(getReactionByPostId(req.params.id));
        res.status(200).json(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}

exports.createReaction = async (req, res) => {
    const reaction = new Reaction({
        user_id: req.body.user_id,
        post_id: req.body.post_id,
        type: req.body.type
    });

    try {
        const newReaction = await reaction.save();
        res.status(201).json(newReaction);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
}

exports.updateReactionById = async (req, res) => {
    try {
        const reaction = await Reaction.findById([req.params.user_id, req.params.post_id]);
        if (req.body.type != null) {
            reaction.type = req.body.type;
        }
        const updatedReaction = await reaction.save();
        res.status(200).json(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}

exports.deleteReactionById = async (req, res) => {
    try {
        const reaction = await Reaction.deleteReactionById(req.params.user_id, req.params.post_id);
        res.status(200).json(reaction);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
}